 (cd "$(git rev-parse --show-toplevel)" && git apply --3way <<'EOF' 
diff --git a/frontend/app/profile-setup/page.tsx b/frontend/app/profile-setup/page.tsx
index bd00a5484d0e6ae5b595288bc0a2526be631d55f..29329b90e4f1ca02625ba6de74ef1e373ddeeb57 100644
--- a/frontend/app/profile-setup/page.tsx
+++ b/frontend/app/profile-setup/page.tsx
@@ -1,41 +1,42 @@
 'use client';
 
 import { useState, useEffect } from 'react';
-import { supabase } from '../../services/supabaseClient';
+import { getSupabaseClient } from '../../services/supabaseClient';
 import { useRouter } from 'next/navigation';
 
 export default function ProfileSetupPage() {
   const [name, setName] = useState('');
   const [location, setLocation] = useState('');
   const [allergies, setAllergies] = useState('');
   const [dietary, setDietary] = useState('');
   const [budget, setBudget] = useState<number | ''>('');
   const [mealSizes, setMealSizes] = useState('');
   const [dietTypes, setDietTypes] = useState('');
   const [error, setError] = useState<string | null>(null);
   const [loading, setLoading] = useState(false);
+  const supabase = getSupabaseClient();
   const router = useRouter();
 
   useEffect(() => {
     // Redirect if not signed in
     supabase.auth.getUser().then(({ data: { user } }) => {
       if (!user) {
         router.push('/signin');
       }
     });
   }, [router]);
 
   const handleSubmit = async (e: React.FormEvent) => {
     e.preventDefault();
     setError(null);
     setLoading(true);
 
     const {
       data: { user }
     } = await supabase.auth.getUser();
     if (!user) {
       setError('Not authenticated');
       setLoading(false);
       return;
     }
 
diff --git a/frontend/app/signin/page.tsx b/frontend/app/signin/page.tsx
index 143527b9c10d309b63e60d3c8704db22995c65e1..b261916acf7d20d8ed63b19b15c229e618395213 100644
--- a/frontend/app/signin/page.tsx
+++ b/frontend/app/signin/page.tsx
@@ -1,34 +1,35 @@
 'use client';
 import { useState } from 'react';
-import { supabase } from '../../services/supabaseClient';
+import { getSupabaseClient } from '../../services/supabaseClient';
 import { useRouter } from 'next/navigation';
 
 export default function SignInPage() {
   const [email, setEmail] = useState('');
   const [password, setPassword] = useState('');
   const [error, setError] = useState<string | null>(null);
+  const supabase = getSupabaseClient();
   const router = useRouter();
 
   const handleSignIn = async (e: React.FormEvent) => {
     e.preventDefault();
     setError(null);
     const { error } = await supabase.auth.signInWithPassword({ email, password });
     if (error) {
       setError(error.message);
     } else {
       router.push('/profile-setup');
     }
   };
 
   return (
     <div className="max-w-md mx-auto mt-10 p-4">
       <h1 className="text-2xl font-bold mb-4">Sign In</h1>
       {error && <p className="text-red-500 mb-2">{error}</p>}
       <form onSubmit={handleSignIn} className="space-y-4">
         <input
           type="email"
           placeholder="Email"
           value={email}
           onChange={e => setEmail(e.target.value)}
           className="w-full border p-2"
           required
diff --git a/frontend/app/signup/page.tsx b/frontend/app/signup/page.tsx
index 07e8e161d01fa433039b78f9efd8e3e65339885e..4cc22aba707e98965c2f79409289a5d36df3228c 100644
--- a/frontend/app/signup/page.tsx
+++ b/frontend/app/signup/page.tsx
@@ -1,34 +1,35 @@
 'use client';
 import { useState } from 'react';
-import { supabase } from '../../services/supabaseClient';
+import { getSupabaseClient } from '../../services/supabaseClient';
 import { useRouter } from 'next/navigation';
 
 export default function SignUpPage() {
   const [email, setEmail] = useState('');
   const [password, setPassword] = useState('');
   const [error, setError] = useState<string | null>(null);
+  const supabase = getSupabaseClient();
   const router = useRouter();
 
   const handleSignUp = async (e: React.FormEvent) => {
     e.preventDefault();
     setError(null);
     const { error } = await supabase.auth.signUp({ email, password });
     if (error) {
       setError(error.message);
     } else {
       router.push('/profile-setup');
     }
   };
 
   return (
     <div className="max-w-md mx-auto mt-10 p-4">
       <h1 className="text-2xl font-bold mb-4">Sign Up</h1>
       {error && <p className="text-red-500 mb-2">{error}</p>}
       <form onSubmit={handleSignUp} className="space-y-4">
         <input
           type="email"
           placeholder="Email"
           value={email}
           onChange={e => setEmail(e.target.value)}
           className="w-full border p-2"
           required
diff --git a/frontend/app/vendor-selection/page.tsx b/frontend/app/vendor-selection/page.tsx
index 3d602ed7668088d3932a999cf366803e15f59ac3..b1805d6c84c508c0c9d15cd9e78d40777e4cb190 100644
--- a/frontend/app/vendor-selection/page.tsx
+++ b/frontend/app/vendor-selection/page.tsx
@@ -1,38 +1,39 @@
 'use client';
 
 import { useState, useEffect } from 'react';
 import { useRouter } from 'next/navigation';
 import config from '../../services/config.json';
-import { supabase } from '../../services/supabaseClient';
+import { getSupabaseClient } from '../../services/supabaseClient';
 
 export default function VendorSelectionPage() {
   const router = useRouter();
   const vendors = Object.keys(config);
   const [selected, setSelected] = useState<string[]>([]);
   const [loading, setLoading] = useState(true);
   const [error, setError] = useState<string | null>(null);
+  const supabase = getSupabaseClient();
 
   // Load existing preferences and ensure auth
   useEffect(() => {
     async function load() {
       const {
         data: { user }
       } = await supabase.auth.getUser();
       if (!user) {
         router.push('/signin');
         return;
       }
       const { data, error } = await supabase
         .from('profiles')
         .select('preferred_vendors')
         .eq('user_id', user.id)
         .single();
       if (data?.preferred_vendors) {
         setSelected(data.preferred_vendors);
       }
       if (error) {
         setError(error.message);
       }
       setLoading(false);
     }
     load();
diff --git a/frontend/context/AuthContext.tsx b/frontend/context/AuthContext.tsx
index 37451028ecf4e4e366107577328481b239265334..678d0c93fd403d7f64e82a520cf97ac993f4b415 100644
--- a/frontend/context/AuthContext.tsx
+++ b/frontend/context/AuthContext.tsx
@@ -1,44 +1,45 @@
 'use client';
 
 import { createContext, useState, useEffect, ReactNode } from 'react';
 import { Session, User } from '@supabase/supabase-js';
-import { supabase } from '../services/supabaseClient';
+import { getSupabaseClient } from '../services/supabaseClient';
 
 interface AuthContextType {
   session: Session | null;
   user: User | null;
 }
 
 export const AuthContext = createContext<AuthContextType>({
   session: null,
   user: null,
 });
 
 export function AuthProvider({ children }: { children: ReactNode }) {
   const [session, setSession] = useState<Session | null>(null);
   const [user, setUser] = useState<User | null>(null);
+  const supabase = getSupabaseClient();
 
   useEffect(() => {
     supabase.auth.getSession().then(({ data: { session } }) => {
       setSession(session);
       setUser(session?.user ?? null);
     });
 
     const { data: listener } = supabase.auth.onAuthStateChange(
       (_event, session) => {
         setSession(session);
         setUser(session?.user ?? null);
       }
     );
 
     return () => {
       listener.subscription.unsubscribe();
     };
   }, []);
 
   return (
     <AuthContext.Provider value={{ session, user }}>
       {children}
     </AuthContext.Provider>
   );
 }
diff --git a/frontend/pages/api/cart.ts b/frontend/pages/api/cart.ts
index ac370a3df4024565539eaf0e40aa9a4f6a5d261b..79d5d82379c521708ad9c08839aabd55faa297a3 100644
--- a/frontend/pages/api/cart.ts
+++ b/frontend/pages/api/cart.ts
@@ -1,38 +1,39 @@
 /**
  * Handles user's cart operations.
  *
  * GET  /api/cart?userId={userId}
  *   - Retrieves current cart items for the user.
  * POST /api/cart
  *   - Body: { userId: string, mealId: string }
  *   - Adds the specified meal to the user's cart (creates cart if none).
  */
 import type { NextApiRequest, NextApiResponse } from 'next';
-import { supabase } from '../../services/supabaseClient';
+import { getSupabaseClient } from '../../services/supabaseClient';
 
 export default async function handler(req: NextApiRequest, res: NextApiResponse) {
+  const supabase = getSupabaseClient();
   const { userId, mealId } = req.method === 'GET' ? req.query : req.body;
   if (!userId || Array.isArray(userId)) {
     return res.status(400).json({ error: 'Missing or invalid userId' });
   }
 
   if (req.method === 'POST') {
     if (!mealId || typeof mealId !== 'string') {
       return res.status(400).json({ error: 'Missing or invalid mealId' });
     }
     // Fetch or create cart
     const { data: existing, error: fetchError } = await supabase
       .from('carts')
       .select('id, meals')
       .eq('user_id', userId)
       .single();
     if (fetchError && fetchError.code !== 'PGRST116') {
       return res.status(500).json({ error: fetchError.message });
     }
     if (existing) {
       const updatedMeals = Array.from(new Set([...(existing.meals || []), mealId]));
       const { error: updateError } = await supabase
         .from('carts')
         .update({ meals: updatedMeals })
         .eq('id', existing.id);
       if (updateError) {
diff --git a/frontend/pages/api/history.ts b/frontend/pages/api/history.ts
index 46438546f3a641611858285dd5e42f1568390ea7..844cfc2f74c1d610f6fcef67d285f30dbfa15af7 100644
--- a/frontend/pages/api/history.ts
+++ b/frontend/pages/api/history.ts
@@ -1,29 +1,30 @@
 import type { NextApiRequest, NextApiResponse } from 'next';
-import { supabase } from '../../services/supabaseClient';
+import { getSupabaseClient } from '../../services/supabaseClient';
 
 export default async function handler(req: NextApiRequest, res: NextApiResponse) {
+  const supabase = getSupabaseClient();
   const { userId } = req.query;
   if (!userId || Array.isArray(userId)) {
     return res.status(400).json({ error: 'Missing or invalid userId' });
   }
 
   // Fetch user's past carts
   const { data: carts, error: cartError } = await supabase
     .from('carts')
     .select('meals, created_at')
     .eq('user_id', userId)
     .order('created_at', { ascending: false });
 
   if (cartError) {
     return res.status(500).json({ error: cartError.message });
   }
 
   // For each cart, fetch meal details including instructions
   const history = await Promise.all(
     (carts || []).map(async cart => {
       const mealIds: string[] = cart.meals || [];
       const { data: items, error: mealsError } = await supabase
         .from('meals')
         .select('id, name, instructions')
         .in('id', mealIds);
       if (mealsError) {
diff --git a/frontend/pages/api/meal-suggestions.ts b/frontend/pages/api/meal-suggestions.ts
index c71d9c144a3d56c29f31af34f2706b07f5d7887a..4c2c65f7550b482512f2c52617dbe108699f1be0 100644
--- a/frontend/pages/api/meal-suggestions.ts
+++ b/frontend/pages/api/meal-suggestions.ts
@@ -1,35 +1,36 @@
 /**
  * GET /api/meal-suggestions?userId={userId}
  * Returns sorted list of meal suggestions filtered by user profile:
  *  - Excludes meals conflicting with dietary restrictions.
  *  - Placeholder savings calculation (to be enhanced with deals).
  */
 import type { NextApiRequest, NextApiResponse } from 'next';
-import { supabase } from '../../services/supabaseClient';
+import { getSupabaseClient } from '../../services/supabaseClient';
 
 export default async function handler(req: NextApiRequest, res: NextApiResponse) {
+  const supabase = getSupabaseClient();
   const { userId } = req.query;
   if (!userId || Array.isArray(userId)) {
     return res.status(400).json({ error: 'Missing or invalid userId' });
   }
 
   // Fetch user profile
   const { data: profile, error: profileError } = await supabase
     .from('profiles')
     .select('*')
     .eq('user_id', userId)
     .single();
 
   if (profileError || !profile) {
     return res.status(500).json({ error: profileError?.message || 'Unable to fetch profile' });
   }
 
   // Fetch all meals
   const { data: meals, error: mealsError } = await supabase
     .from('meals')
     .select('*');
 
   if (mealsError) {
     return res.status(500).json({ error: mealsError.message });
   }
 
diff --git a/frontend/pages/api/scheduleScrape.ts b/frontend/pages/api/scheduleScrape.ts
index d34912d84a11aec0a53cbbdc49a1b2fd44667f67..f4a6b0347777961ca4358c60259b60c4bc98d5cf 100644
--- a/frontend/pages/api/scheduleScrape.ts
+++ b/frontend/pages/api/scheduleScrape.ts
@@ -1,39 +1,40 @@
 import type { NextApiRequest, NextApiResponse } from 'next';
 import { getScraper } from '../../services/scraperFactory';
-import { supabase } from '../../services/supabaseClient';
+import { getSupabaseClient } from '../../services/supabaseClient';
 
 const VENDORS = ['publix', 'walmart', 'traderjoes'];
 
 interface ScrapeResult {
   vendor: string;
   count?: number;
   status: string;
   message?: string;
 }
 
 export default async function handler(req: NextApiRequest, res: NextApiResponse) {
+  const supabase = getSupabaseClient();
   const results: ScrapeResult[] = [];
 
   for (const vendor of VENDORS) {
     try {
       const scraper = getScraper(vendor);
       const deals = await scraper.getDeals();
       const { error } = await supabase
         .from('deals')
         .upsert(deals.map(d => ({ ...d, vendor })), {
           onConflict: 'id,vendor'
         });
       if (error) throw error;
       results.push({ vendor, count: deals.length, status: 'ok' });
     } catch (err: unknown) {
       console.error('Schedule scrape error:', vendor, err);
       const message = err instanceof Error ? err.message : String(err);
       await supabase.from('scrapeLogs').insert({
         vendor,
         error: message,
         timestamp: new Date()
       });
       results.push({ vendor, status: 'error', message });
     }
   }
 
diff --git a/frontend/pages/api/scrape.ts b/frontend/pages/api/scrape.ts
index 89f85a18e89146c2dd78aa63619c9c3b6f9d4338..64c23bae569ad49f443b3b62d78f5567d393ded6 100644
--- a/frontend/pages/api/scrape.ts
+++ b/frontend/pages/api/scrape.ts
@@ -1,30 +1,31 @@
 import type { NextApiRequest, NextApiResponse } from 'next';
 import { getScraper } from '../../services/scraperFactory';
-import { supabase } from '../../services/supabaseClient';
+import { getSupabaseClient } from '../../services/supabaseClient';
 
 export default async function handler(req: NextApiRequest, res: NextApiResponse) {
+  const supabase = getSupabaseClient();
   const vendorParam = (req.query.vendor as string)?.toLowerCase();
   if (!vendorParam) {
     return res.status(400).json({ error: 'Query parameter "vendor" is required.' });
   }
 
   try {
     const scraper = getScraper(vendorParam);
     const deals = await scraper.getDeals();
 
     // Upsert deals into Supabase
     const { error } = await supabase
       .from('deals')
       .upsert(deals.map(d => ({ ...d, vendor: vendorParam })), {
         onConflict: 'id,vendor'
       });
 
     if (error) {
       throw error;
     }
 
     return res.status(200).json({ vendor: vendorParam, count: deals.length });
   } catch (err: unknown) {
     console.error('Scrape error:', vendorParam, err);
     const message = err instanceof Error ? err.message : String(err);
     // Log error to Supabase
diff --git a/frontend/scripts/seedIngredients.ts b/frontend/scripts/seedIngredients.ts
index 4a3dfeb4f5e03b4813676a9ffdea1506060b6fe6..657f05f21561c323a3685ef966bac69a2d00e3b8 100644
--- a/frontend/scripts/seedIngredients.ts
+++ b/frontend/scripts/seedIngredients.ts
@@ -1,35 +1,36 @@
 import fs from 'fs';
 import path from 'path';
-import { supabase } from '../services/supabaseClient';
+import { getSupabaseClient } from '../services/supabaseClient';
 
 interface Ingredient {
   code: string;
   name: string;
 }
 
 async function seedIngredients() {
+  const supabase = getSupabaseClient();
   try {
     const dataPath = path.resolve(process.cwd(), 'data', 'ingredients.json');
     if (!fs.existsSync(dataPath)) {
       console.error('ingredients.json not found in data/. Run extract and parse scripts first.');
       process.exit(1);
     }
     const raw = fs.readFileSync(dataPath, 'utf8');
     const ingredients = JSON.parse(raw);
 
     const { data, error } = await supabase
       .from('ingredients')
       .insert<Ingredient>(ingredients);
 
     if (error) {
       console.error('Error seeding ingredients:', error);
       process.exit(1);
     }
     console.log(`Seeded ${ingredients.length} ingredients successfully.`);
   } catch (err) {
     console.error('Unexpected error:', err);
     process.exit(1);
   }
 }
 
 seedIngredients();
diff --git a/frontend/services/supabaseClient.ts b/frontend/services/supabaseClient.ts
index 719ad5515ab8c4878717400b28c7c98df47b7e37..dabf0a1410bcdb90634f54378d0ffd40892c13ca 100644
--- a/frontend/services/supabaseClient.ts
+++ b/frontend/services/supabaseClient.ts
@@ -1,6 +1,15 @@
-import { createClient } from '@supabase/supabase-js';
+import { createClient, SupabaseClient } from '@supabase/supabase-js';
 
-const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!;
-const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;
+let supabase: SupabaseClient | null = null;
 
-export const supabase = createClient(supabaseUrl, supabaseAnonKey);
+export const getSupabaseClient = (): SupabaseClient => {
+  if (!supabase) {
+    const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
+    const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;
+    if (!supabaseUrl || !supabaseAnonKey) {
+      throw new Error('Supabase environment variables are missing.');
+    }
+    supabase = createClient(supabaseUrl, supabaseAnonKey);
+  }
+  return supabase;
+};
 
EOF
)